#!/usr/bin/env python3
"""
custom_visualization.py - Example of customizing the visualization dashboard

This example demonstrates how to create a custom visualization dashboard
for TCP packet statistics using the TCP Packet Recovery package.
"""

import time
import logging
import threading
import argparse
import dash
from dash import dcc, html
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output
import plotly.graph_objs as go
import numpy as np
import pandas as pd

from tcp_packet_recovery import PacketCapture, PacketAnalyzer, EventLogger
from tcp_packet_recovery.visualizer import PacketVisualizer

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class CustomVisualizer(PacketVisualizer):
    """Custom packet visualizer with additional features."""
    
    def create_app(self):
        """Create a custom Dash app for visualization."""
        app = dash.Dash(__name__, 
                       external_stylesheets=[dbc.themes.CYBORG],  # Use a dark theme
                       suppress_callback_exceptions=True)
        
        # Define the layout with custom components
        app.layout = html.Div([
            dbc.NavbarSimple(
                children=[
                    dbc.NavItem(dbc.NavLink("Dashboard", href="#")),
                    dbc.DropdownMenu(
                        id='stream-dropdown',
                        children=[
                            dbc.DropdownMenuItem("Loading streams...", id="loading-streams")
                        ],
                        nav=True,
                        in_navbar=True,
                        label="Select Stream",
                    ),
                ],
                brand="Custom TCP Monitor Dashboard",
                brand_href="#",
                color="success",  # Green color for the navbar
                dark=True,
            ),
            dbc.Container([
                html.Div(id='hidden-div', style={'display': 'none'}),
                dcc.Interval(
                    id='interval-component',
                    interval=int(self.update_interval * 1000),  # in milliseconds
                    n_intervals=0
                ),
                # Add a header row with real-time summary statistics
                dbc.Row([
                    dbc.Col([
                        dbc.Card([
                            dbc.CardHeader("Monitor Summary", className="text-center"),
                            dbc.CardBody([
                                html.Div(id='summary-stats', className="text-center")
                            ])
                        ], className="mb-4"),
                    ], width=12),
                ]),
                dbc.Row([
                    dbc.Col([
                        dbc.Card([
                            dbc.CardHeader("Stream Statistics"),
                            dbc.CardBody([
                                html.Div(id='stream-stats')
                            ])
                        ], className="mb-4"),
                    ], width=6),
                    dbc.Col([
                        dbc.Card([
                            dbc.CardHeader("Packet Distribution"),
                            dbc.CardBody([
                                dcc.Graph(id='packet-distribution-graph')
                            ])
                        ], className="mb-4"),
                    ], width=6),
                ]),
                dbc.Row([
                    dbc.Col([
                        dbc.Card([
                            dbc.CardHeader("Packet Loss Over Time"),
                            dbc.CardBody([
                                dcc.Graph(id='packet-loss-graph')
                            ])
                        ], className="mb-4"),
                    ], width=6),
                    dbc.Col([
                        dbc.Card([
                            dbc.CardHeader("Recovery Rate"),
                            dbc.CardBody([
                                dcc.Graph(id='recovery-rate-graph')
                            ])
                        ], className="mb-4"),
                    ], width=6),
                ]),
                dbc.Row([
                    dbc.Col([
                        dbc.Card([
                            dbc.CardHeader("Recent Events"),
                            dbc.CardBody([
                                html.Div(id='event-table')
                            ])
                        ], className="mb-4"),
                    ], width=12),
                ]),
            ], fluid=True),
        ])
        
        # Define callbacks
        @app.callback(
            [Output('stream-dropdown', 'children'),
             Output('summary-stats', 'children'),
             Output('stream-stats', 'children'),
             Output('packet-distribution-graph', 'figure'),
             Output('packet-loss-graph', 'figure'),
             Output('recovery-rate-graph', 'figure'),
             Output('event-table', 'children')],
            [Input('interval-component', 'n_intervals'),
             Input('stream-dropdown', 'value')]
        )
        def update_visualizations(n_intervals, stream_id):
            # Get the stream ID from callback context if available
            ctx = dash.callback_context
            if ctx.triggered:
                input_id = ctx.triggered[0]['prop_id'].split('.')[0]
                if input_id == 'stream-dropdown':
                    self.current_stream_id = stream_id
            
            # Get the data
            data = self.get_stream_data(stream_id=self.current_stream_id)
            
            # Update the stream dropdown
            dropdown_items = []
            for sid in data['stream_ids']:
                dropdown_items.append(dbc.DropdownMenuItem(sid, id=f"stream-{sid}"))
            
            # Create a summary card
            total_streams = len(data['stream_ids'])
            total_packets = sum(data.get('stream_stats', {}).get('total_packets', 0) for sid in data['stream_ids'])
            total_missing = sum(data.get('stream_stats', {}).get('missing_packets', 0) for sid in data['stream_ids'])
            total_injected = sum(data.get('stream_stats', {}).get('injected_packets', 0) for sid in data['stream_ids'])
            
            summary_stats = html.Div([
                html.H3(f"Monitoring {total_streams} Active Streams"),
                html.H4(f"Total Packets: {total_packets}"),
                html.H4(f"Missing Packets: {total_missing}"),
                html.H4(f"Injected Packets: {total_injected}"),
                html.H4(f"Current Stream: {self.current_stream_id or 'None'}")
            ])
            
            # Create a table for stream statistics
            stats = data['stream_stats']
            if stats:
                stats_table = html.Table([
                    html.Tr([html.Th('Metric'), html.Th('Value')]),
                    html.Tr([html.Td('Stream ID'), html.Td(stats.get('stream_id', 'N/A'))]),
                    html.Tr([html.Td('Total Packets'), html.Td(str(stats.get('total_packets', 0)))]),
                    html.Tr([html.Td('Missing Packets'), html.Td(str(stats.get('missing_packets', 0)))]),
                    html.Tr([html.Td('Injected Packets'), html.Td(str(stats.get('injected_packets', 0)))]),
                    html.Tr([html.Td('Packet Loss Rate'), html.Td(f"{stats.get('packet_loss_rate', 0) * 100:.2f}%")]),
                    html.Tr([html.Td('Avg Payload Size'), html.Td(f"{stats.get('average_payload_size', 0):.2f} bytes")]),
                ], className='table table-striped')
            else:
                stats_table = html.Div("No statistics available for this stream")
            
            # Create packet distribution graph (pie chart)
            if stats:
                fig_distribution = go.Figure(data=[go.Pie(
                    labels=['Received', 'Missing', 'Injected'],
                    values=[
                        stats.get('total_packets', 0) - stats.get('missing_packets', 0),
                        stats.get('missing_packets', 0) - stats.get('injected_packets', 0),
                        stats.get('injected_packets', 0)
                    ],
                    hole=.3,
                    marker_colors=['#3D9970', '#FF4136', '#FFDC00']  # Green, Red, Yellow
                )])
                fig_distribution.update_layout(
                    title='Packet Distribution',
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1
                    )
                )
            else:
                fig_distribution = go.Figure()
                fig_distribution.update_layout(
                    title='Packet Distribution',
                    annotations=[dict(
                        text='No data available',
                        showarrow=False,
                        xref="paper",
                        yref="paper",
                        x=0.5,
                        y=0.5
                    )]
                )
            
            # Create packet loss graph
            history = data['packet_loss_history']
            if history:
                df = pd.DataFrame(history)
                fig_loss = go.Figure()
                fig_loss.add_trace(go.Scatter(
                    x=df['interval'],
                    y=df['avg_loss_rate'],
                    mode='lines+markers',
                    name='Loss Rate',
                    line=dict(color='#FF4136', width=3)
                ))
                fig_loss.update_layout(
                    title='Packet Loss Rate Over Time',
                    xaxis_title='Time',
                    yaxis_title='Loss Rate',
                    yaxis=dict(tickformat='.2%')
                )
            else:
                fig_loss = go.Figure()
                fig_loss.update_layout(
                    title='Packet Loss Rate Over Time',
                    xaxis_title='Time',
                    yaxis_title='Loss Rate',
                    annotations=[dict(
                        text='No data available',
                        showarrow=False,
                        xref="paper",
                        yref="paper",
                        x=0.5,
                        y=0.5
                    )]
                )
            
            # Create recovery rate graph
            if history:
                df = pd.DataFrame(history)
                df['recovery_rate'] = df['total_injected'] / df['total_missing'].replace(0, 1)
                fig_recovery = go.Figure()
                fig_recovery.add_trace(go.Scatter(
                    x=df['interval'],
                    y=df['recovery_rate'],
                    mode='lines+markers',
                    name='Recovery Rate',
                    line=dict(color='#3D9970', width=3)
                ))
                fig_recovery.update_layout(
                    title='Packet Recovery Rate Over Time',
                    xaxis_title='Time',
                    yaxis_title='Recovery Rate',
                    yaxis=dict(tickformat='.2%')
                )
            else:
                fig_recovery = go.Figure()
                fig_recovery.update_layout(
                    title='Packet Recovery Rate Over Time',
                    xaxis_title='Time',
                    yaxis_title='Recovery Rate',
                    annotations=[dict(
                        text='No data available',
                        showarrow=False,
                        xref="paper",
                        yref="paper",
                        x=0.5,
                        y=0.5
                    )]
                )
            
            # Create event table with enhanced styling
            events = data['event_history']
            if events:
                # Create a DataFrame for easier manipulation
                df = pd.DataFrame(events)
                df = df.sort_values('timestamp', ascending=False).head(10)
                
                # Format the table with styled rows
                event_rows = []
                for _, event in df.iterrows():
                    # Color-code by event type
                    row_style = {}
                    if event['event_type'] == 'missing_packet':
                        row_style = {'backgroundColor': 'rgba(255, 65, 54, 0.2)'}  # Light red
                    elif event['event_type'] == 'packet_injection':
                        row_style = {'backgroundColor': 'rgba(61, 153, 112, 0.2)'}  # Light green
                    
                    event_rows.append(html.Tr([
                        html.Td(event['timestamp']),
                        html.Td(event['event_type'], style={'fontWeight': 'bold'}),
                        html.Td(str(event['sequence_number'])),
                        html.Td(f"{event['source_ip']}:{event['source_port']} -> "
                               f"{event['destination_ip']}:{event['destination_port']}")
                    ], style=row_style))
                
                event_table = html.Table([
                    html.Thead(
                        html.Tr([
                            html.Th('Time'),
                            html.Th('Event Type'),
                            html.Th('Sequence'),
                            html.Th('Connection')
                        ])
                    ),
                    html.Tbody(event_rows)
                ], className='table table-hover')
            else:
                event_table = html.Div("No events available for this stream")
            
            return dropdown_items, summary_stats, stats_table, fig_distribution, fig_loss, fig_recovery, event_table
        
        self.app = app
        return app

def main():
    """Main function."""
    parser = argparse.ArgumentParser(description='Custom TCP Visualization Example')
    parser.add_argument('-i', '--interface', help='Network interface to capture packets from')
    parser.add_argument('-f', '--filter', default='tcp', help='BPF filter string')
    parser.add_argument('-p', '--port', type=int, default=8050, help='Visualization server port')
    parser.add_argument('-d', '--duration', type=int, default=3600, help='Duration to run in seconds')
    
    args = parser.parse_args()
    
    # Create packet capture and analyzer without KNN model
    packet_capture = PacketCapture(interface=args.interface, filter_str=args.filter)
    packet_analyzer = PacketAnalyzer(packet_capture=packet_capture)
    
    # Create event logger
    event_logger = EventLogger(db_url="sqlite:///custom_visualization.db")
    event_logger.connect()
    event_logger.start_auto_flush()
    
    # Set up event logging
    def log_missing_packet(stream_id, seq_num, prev_packet, next_packet):
        if prev_packet and next_packet:
            event_logger.log_event(
                event_type="missing_packet",
                stream_id=stream_id,
                sequence_number=seq_num,
                source_ip=prev_packet[IP].src if hasattr(prev_packet, 'haslayer') and prev_packet.haslayer(IP) else None,
                destination_ip=prev_packet[IP].dst if hasattr(prev_packet, 'haslayer') and prev_packet.haslayer(IP) else None,
                source_port=prev_packet[TCP].sport if hasattr(prev_packet, 'haslayer') and prev_packet.haslayer(TCP) else None,
                destination_port=prev_packet[TCP].dport if hasattr(prev_packet, 'haslayer') and prev_packet.haslayer(TCP) else None
            )
    
    packet_analyzer.register_missing_packet_handler(log_missing_packet)
    
    # Create custom visualizer
    visualizer = CustomVisualizer(
        event_logger=event_logger,
        host="0.0.0.0",  # Allow external connections
        port=args.port,
        update_interval=2.0  # Update every 2 seconds
    )
    
    # Register data callback for additional statistics
    def provide_additional_data():
        if not packet_capture or not packet_analyzer:
            return {}
        
        # Get stream IDs
        stream_ids = packet_capture.get_all_stream_ids()
        
        # Get analyzer statistics
        analyzer_stats = packet_analyzer.get_missing_packet_statistics()
        
        # Create additional data
        data = {
            'stream_ids': stream_ids,
            'stream_stats': {},
            'packet_loss_history': []
        }
        
        # Generate synthetic loss history (in a real scenario this would come from the database)
        for i in range(10):
            timestamp = time.time() - i * 60  # One entry per minute going back
            data['packet_loss_history'].append({
                'interval': time.strftime('%Y-%m-%d %H:%M', time.localtime(timestamp)),
                'avg_loss_rate': max(0, np.random.normal(0.05, 0.02)),  # Random loss rate around 5%
                'total_missing': int(np.random.normal(50, 20)),  # Random number of missing packets
                'total_injected': int(np.random.normal(40, 15)),  # Random number of injected packets
                'total_packets': int(np.random.normal(1000, 200))  # Random number of total packets
            })
        
        return data
    
    visualizer.register_data_callback(provide_additional_data)
    
    try:
        # Start packet capture and analysis
        logger.info("Starting packet capture...")
        packet_capture.start_capture()
        
        logger.info("Starting packet analysis...")
        packet_analyzer.start_analysis()
        
        # Start visualization
        logger.info(f"Starting visualization server on port {args.port}...")
        visualizer.start_visualization()
        logger.info(f"Visualization dashboard available at http://localhost:{args.port}")
        
        # Run for the specified duration or until interrupted
        logger.info(f"Running for {args.duration} seconds...")
        time.sleep(args.duration)
        
    except KeyboardInterrupt:
        logger.info("Interrupted by user")
    
    finally:
        # Stop components
        logger.info("Stopping packet analysis...")
        packet_analyzer.stop_analysis()
        
        logger.info("Stopping packet capture...")
        packet_capture.stop_capture()
        
        logger.info("Stopping event logger...")
        event_logger.close()
        
        logger.info("Stopping visualization server...")
        visualizer.stop_visualization()
    
    logger.info("Custom visualization example completed")

if __name__ == '__main__':
    # Import IP and TCP here to avoid import errors
    from scapy.all import IP, TCP
    main()